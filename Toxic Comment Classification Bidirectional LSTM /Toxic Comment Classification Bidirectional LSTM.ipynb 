{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.7.4"
    },
    "colab": {
      "name": "06 - DL - Deep Learning For Text Data (LSTM).ipynb",
      "provenance": [],
      "collapsed_sections": [
        "RI3aQSPcz87O",
        "ecuJ94rfz87T"
      ]
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "aEl-x4b7z83c"
      },
      "source": [
        "## Toxic Comment Classification Bidirectional LSTM \n",
        "\n",
        "In this notebook I will be using Bidrectional LSTM for Toxic Comment Classification. This notebook follows the same template as 1-D CNN and LSTM but I will be using BLSTM instead.  \n",
        "\n",
        "### The Data \n",
        "\n",
        "The data consists of a large number of Wikipedia comments which have been labeled by human raters for toxic behavior. The types of toxicity are\n",
        " - toxic\n",
        " - severe_toxic\n",
        " - obscene\n",
        " - threat \n",
        " - insult\n",
        " - identity_hate \n",
        " \n",
        "The levels of toxicity are multiple labels that we need to classify. The link to data is given below \n",
        "\n",
        "https://www.kaggle.com/c/jigsaw-toxic-comment-classification-challenge/data\n",
        "\n",
        "Here, I will be using pre-trained Glove word embeddings from Stanford which can be downloaded from the following link. \n",
        "\n",
        "http://nlp.stanford.edu/data/glove.6B.zip"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "6sH9w3Ky0P3Y",
        "outputId": "14dbe1ae-bd58-4316-ca29-2afdc53cca86",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "# Mount drive \n",
        "from google.colab import drive\n",
        "drive.mount('/content/gdrive')"
      ],
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Mounted at /content/gdrive\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "cwpLdMfq0eBQ",
        "outputId": "abcc4d84-c1b0-4c09-dc79-7df5b18a5c45",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "path = \"//content//gdrive//My Drive//AI School Class//\"\n",
        "import os\n",
        "os.path.isdir(path)   "
      ],
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "True"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 11
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "hGVutHuaz83d"
      },
      "source": [
        "### Basic Imports "
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "L6cG5f90z83e"
      },
      "source": [
        "import os\n",
        "import sys\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "from keras.preprocessing.text import Tokenizer\n",
        "from keras.preprocessing.sequence import pad_sequences\n",
        "from keras.layers import Dense, Input, GlobalMaxPooling1D\n",
        "from keras.layers import LSTM,Embedding,Bidirectional\n",
        "from keras.models import Model\n",
        "from sklearn.metrics import roc_auc_score"
      ],
      "execution_count": 3,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "3uOgw4hLz83i"
      },
      "source": [
        "### Constants "
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "HALrVBsCz83j"
      },
      "source": [
        "MAX_SEQUENCE_LENGTH = 100\n",
        "MAX_VOCAB_SIZE = 20000\n",
        "EMBEDDING_DIM = 100 # pre-trained embeddings only come in specific sizes, so we can only use 50,100,200 or 300\n",
        "VALIDATION_SPLIT = 0.2\n",
        "BATCH_SIZE = 128\n",
        "EPOCHS = 5"
      ],
      "execution_count": 4,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Tj0lcbfNz83m"
      },
      "source": [
        "### Loading Word Embeddings "
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "scrolled": true,
        "id": "bSNr-828z83n",
        "outputId": "0f4fafd0-1f64-4576-d5db-a9ce22af38a2",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "word2vec = {}\n",
        "EmbeddingPath = path + \"Word Embedding Data//\"\n",
        "with open(os.path.join(EmbeddingPath + 'glove.6B.100d.txt'),encoding='utf8') as f:\n",
        "    for line in f:\n",
        "        values = line.split()\n",
        "        word = values[0]\n",
        "        vec = np.asarray(values[1:], dtype='float32')\n",
        "        word2vec[word] = vec\n",
        "print('Found {} word vectors.'.format(len(word2vec)))"
      ],
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Found 400000 word vectors.\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "yRItBupGz83p",
        "outputId": "409065ff-aad6-42a4-fc86-79568ee6e93d",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 311
        }
      },
      "source": [
        "print(word2vec['learn'])"
      ],
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[ 0.18891    0.63799    0.075638   0.33383   -0.99587    0.23747\n",
            " -0.69074   -0.086302   0.36911   -0.21226   -0.10531   -0.011829\n",
            "  0.22845   -0.1619    -0.50134   -0.11213    0.24211    0.48296\n",
            " -1.0838     0.73522   -0.53425   -0.43445   -0.045934  -0.52935\n",
            " -0.37118   -0.27539   -0.28836   -0.46369    0.82424    0.07192\n",
            " -1.3581     1.0104    -0.24337   -0.13548    0.31837    0.086117\n",
            " -0.49628    0.098393   0.47586   -0.54786   -0.85811   -0.062529\n",
            " -0.61222   -0.60052   -1.0714     0.62396    0.17252   -0.087842\n",
            "  0.16302   -1.0081    -0.2794     0.14038   -0.095633   0.85352\n",
            "  0.28309   -1.3578     0.29672   -0.21952    1.1973    -0.12956\n",
            " -0.29996    1.3762    -0.16659   -0.8207     0.36948    0.34471\n",
            "  0.21252    0.46557    0.0086329 -0.093422  -0.081852   0.068303\n",
            "  0.032109  -0.50893   -0.11212    0.56576   -0.48463   -0.24247\n",
            " -0.026416  -0.051543   0.33341    0.034376  -0.57394   -0.26747\n",
            " -1.5794     0.025365   0.017201  -0.1132    -0.98805    0.014049\n",
            "  0.26933   -0.013693   0.43831   -0.29728   -0.54932   -0.27241\n",
            " -0.6725    -0.91486    0.072425   0.3408   ]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "l9yzF0xyz83s",
        "outputId": "726e2e49-580f-4a39-b1be-a1541edf46b0",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "dist = np.linalg.norm(word2vec['mother'] - word2vec['father'])\n",
        "dist"
      ],
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "3.047947"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "7sgKgw7Oz83v",
        "outputId": "f1a90655-2466-4adc-95b3-d7812ec5cdcb",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "dist = np.linalg.norm(word2vec['mother'] - word2vec['child'])\n",
        "dist"
      ],
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "3.8879817"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ltKB5gwKz83x",
        "outputId": "7ee514f7-7712-4f6c-c40e-3426866bb5d8",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "dist = np.linalg.norm(word2vec['study'] - word2vec['learn'])\n",
        "dist"
      ],
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "5.258319"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "skAzKA_Ez830",
        "outputId": "7e2de54f-41f2-4102-a95f-8cb150b988a8",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "dist = np.linalg.norm(word2vec['study'] - word2vec['studied'])\n",
        "dist"
      ],
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "4.36827"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 10
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "jrFCvYynz832"
      },
      "source": [
        "### Loading Data"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "29vxG3vMz833"
      },
      "source": [
        "DataPath = path + \"Toxic Data//\"\n",
        "data_train = pd.read_csv(DataPath + 'train.csv')"
      ],
      "execution_count": 13,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "eltb7wWrz835",
        "outputId": "36e2c7b3-df6f-4d7d-e2c6-46bc8c154f1d",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 198
        }
      },
      "source": [
        "data_train.head()"
      ],
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>id</th>\n",
              "      <th>comment_text</th>\n",
              "      <th>toxic</th>\n",
              "      <th>severe_toxic</th>\n",
              "      <th>obscene</th>\n",
              "      <th>threat</th>\n",
              "      <th>insult</th>\n",
              "      <th>identity_hate</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0000997932d777bf</td>\n",
              "      <td>Explanation\\nWhy the edits made under my usern...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>000103f0d9cfb60f</td>\n",
              "      <td>D'aww! He matches this background colour I'm s...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>000113f07ec002fd</td>\n",
              "      <td>Hey man, I'm really not trying to edit war. It...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0001b41b1c6bb37e</td>\n",
              "      <td>\"\\nMore\\nI can't make any real suggestions on ...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0001d958c54c6e35</td>\n",
              "      <td>You, sir, are my hero. Any chance you remember...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "                 id  ... identity_hate\n",
              "0  0000997932d777bf  ...             0\n",
              "1  000103f0d9cfb60f  ...             0\n",
              "2  000113f07ec002fd  ...             0\n",
              "3  0001b41b1c6bb37e  ...             0\n",
              "4  0001d958c54c6e35  ...             0\n",
              "\n",
              "[5 rows x 8 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 14
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "c0PRjNA6z838",
        "outputId": "e8497ab2-6d92-4232-9846-1f8567b1bb43",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "data_train.shape"
      ],
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(159571, 8)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 15
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "W1dwZ65sz83-",
        "outputId": "38793518-caeb-4857-c602-2f6b4bc0b6db",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 276
        }
      },
      "source": [
        "data_train.info()"
      ],
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 159571 entries, 0 to 159570\n",
            "Data columns (total 8 columns):\n",
            " #   Column         Non-Null Count   Dtype \n",
            "---  ------         --------------   ----- \n",
            " 0   id             159571 non-null  object\n",
            " 1   comment_text   159571 non-null  object\n",
            " 2   toxic          159571 non-null  int64 \n",
            " 3   severe_toxic   159571 non-null  int64 \n",
            " 4   obscene        159571 non-null  int64 \n",
            " 5   threat         159571 non-null  int64 \n",
            " 6   insult         159571 non-null  int64 \n",
            " 7   identity_hate  159571 non-null  int64 \n",
            "dtypes: int64(6), object(2)\n",
            "memory usage: 9.7+ MB\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "zsvUpqG7z84B"
      },
      "source": [
        "### Seprating comments from the data frame"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "hd2VbHzoz84B"
      },
      "source": [
        "comments = data_train['comment_text'].fillna('Dummy_Value').values"
      ],
      "execution_count": 17,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "UwXD4oCdz84G",
        "outputId": "d1529288-5905-4fd7-b6b6-2b7f80346fc9",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "comments.shape"
      ],
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(159571,)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 19
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "M4xUSjj8z84J",
        "outputId": "0b22f9ce-d6fd-406a-d37e-84860def1a65",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "type(comments)"
      ],
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "numpy.ndarray"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 20
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "N-kvH1h1z84L"
      },
      "source": [
        "### Creating labes for the multi-label classification "
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "fDNceor_z84L"
      },
      "source": [
        "labels = [\"toxic\", \"severe_toxic\", \"obscene\", \"threat\", \"insult\", \"identity_hate\"]"
      ],
      "execution_count": 21,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "kPEcKkvrz84O",
        "outputId": "2f90bb5c-1fb8-45a3-d28b-7c96e41cc749",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 138
        }
      },
      "source": [
        "list(data_train.columns)[1:]"
      ],
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['comment_text',\n",
              " 'toxic',\n",
              " 'severe_toxic',\n",
              " 'obscene',\n",
              " 'threat',\n",
              " 'insult',\n",
              " 'identity_hate']"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 22
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "9YPnnffyz84R"
      },
      "source": [
        "targets = data_train[labels].values"
      ],
      "execution_count": 23,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "R_Rj4nObz84T",
        "outputId": "3dc07946-837a-430a-d1d3-bee25b6f4a82",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "# targets shape : (Num of Samples,Num of target labels)\n",
        "targets.shape"
      ],
      "execution_count": 24,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(159571, 6)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 24
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "cPgmXUzwz84V"
      },
      "source": [
        "### Printing out some information about the comments"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "v1ee5Jx9z84V",
        "outputId": "94ecfeae-6d2b-4451-cde2-a9781b13a1db",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "print('Max Sentence Length : ', max(len(sentence) for sentence in  comments))"
      ],
      "execution_count": 25,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Max Sentence Length :  5000\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "QAsG4ozuz84a",
        "outputId": "2957ded4-bfc9-4789-b52b-476b27183e83",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "print('Min Sentence Lenth :', min(len(sentence) for sentence in comments))"
      ],
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Min Sentence Lenth : 6\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "pCL610BKz84g",
        "outputId": "0a07b151-3197-4663-943d-7cbd13f916d3",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "sorted_comments = sorted(len(sentensce) for sentensce in comments)\n",
        "print('Median Sentence Lenth :', sorted_comments[len(sorted_comments)//2])"
      ],
      "execution_count": 27,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Median Sentence Lenth : 205\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "eqRQik1dz84j"
      },
      "source": [
        "### Tokenizing "
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "_l_Q9d6Yz84j"
      },
      "source": [
        "tokenizer = Tokenizer(num_words=MAX_VOCAB_SIZE)"
      ],
      "execution_count": 28,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "yN_mcgJ9z84m"
      },
      "source": [
        "tokenizer.fit_on_texts(comments)"
      ],
      "execution_count": 29,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "BcdLBw10z84s"
      },
      "source": [
        "sequences = tokenizer.texts_to_sequences(comments)"
      ],
      "execution_count": 30,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "52Ft5PPnz84x",
        "outputId": "3a11d638-764a-4e18-8a7e-14371251d1e4",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 54
        }
      },
      "source": [
        "print(sequences[0])"
      ],
      "execution_count": 31,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[688, 75, 1, 126, 130, 177, 29, 672, 4511, 12052, 1116, 86, 331, 51, 2278, 11448, 50, 6864, 15, 60, 2756, 148, 7, 2937, 34, 117, 1221, 15190, 2825, 4, 45, 59, 244, 1, 365, 31, 1, 38, 27, 143, 73, 3462, 89, 3085, 4583, 2273, 985]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "8l59lgjbz842",
        "outputId": "b1081566-f480-4fd9-b3b2-ab3edab8d251",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "len(sequences)"
      ],
      "execution_count": 32,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "159571"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 32
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "CqojkxdGz84_",
        "outputId": "fc973767-85f1-4a17-b99c-ea5e683c1159",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 52
        }
      },
      "source": [
        "comments[0]"
      ],
      "execution_count": 33,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            },
            "text/plain": [
              "\"Explanation\\nWhy the edits made under my username Hardcore Metallica Fan were reverted? They weren't vandalisms, just closure on some GAs after I voted at New York Dolls FAC. And please don't remove the template from the talk page since I'm retired now.89.205.38.27\""
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 33
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "3Hv_wNulz85J",
        "outputId": "eadecdb5-7137-488f-84b2-225d3687ef08",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "print(\"Max sequence length:\", max(len(s) for s in sequences))"
      ],
      "execution_count": 34,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Max sequence length: 1400\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "YKcrMuyXz85M",
        "outputId": "ad392c20-f7d2-4a43-f050-fde8b4f31890",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "print(\"Max sequence length:\", min(len(s) for s in sequences))"
      ],
      "execution_count": 35,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Max sequence length: 0\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "or9eE3vvz85P",
        "outputId": "a2a423d5-3c81-4899-b886-14756aa51f0a",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "sorted_seq = sorted(len(s) for s in sequences)\n",
        "print(\"Median sequence length:\", sorted_seq[len(sorted_seq) // 2])"
      ],
      "execution_count": 36,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Median sequence length: 35\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "okahjNSpz85U"
      },
      "source": [
        "###  Word to Integer mapping"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Xl-54N3Lz85V"
      },
      "source": [
        "word2idx = tokenizer.word_index"
      ],
      "execution_count": 37,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "V1p7p75Hz85c",
        "outputId": "dc72a9d2-80ae-4b48-f6ea-bd9a0994fd7e",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "print('Number of Unique tokens are : {}'.format(len(word2idx)) ) \n",
        "# We actually have more words than the MAX_VOCAB_SIZE!!"
      ],
      "execution_count": 39,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Number of Unique tokens are : 210337\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "YVLy2XUKz85j",
        "outputId": "06329f1a-47de-4fff-a7ee-66c9c8e418c8",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "MAX_VOCAB_SIZE"
      ],
      "execution_count": 40,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "20000"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 40
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "t71OOgjiz85m",
        "outputId": "cc1a3654-1ff5-4295-bd23-19ce972d23c1",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "MAX_SEQUENCE_LENGTH"
      ],
      "execution_count": 41,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "100"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 41
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "FGI6kdpyz85p"
      },
      "source": [
        "### Padding "
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "b8g3kvMYz85q"
      },
      "source": [
        "pad_data = pad_sequences(sequences,maxlen=MAX_SEQUENCE_LENGTH)"
      ],
      "execution_count": 42,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "bPP81tPrz85t",
        "outputId": "bbdeb262-6870-461f-ff4c-35038ed22018",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 138
        }
      },
      "source": [
        "pad_data"
      ],
      "execution_count": 43,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[    0,     0,     0, ...,  4583,  2273,   985],\n",
              "       [    0,     0,     0, ...,   589,  8377,   182],\n",
              "       [    0,     0,     0, ...,     1,   737,   468],\n",
              "       ...,\n",
              "       [    0,     0,     0, ...,  3509, 13675,  4528],\n",
              "       [    0,     0,     0, ...,   151,    34,    11],\n",
              "       [    0,     0,     0, ...,  1627,  2056,    88]], dtype=int32)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 43
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "lHH17780z85y",
        "outputId": "fa1f1372-8617-4f74-ffba-8e68b7020fef",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "len(pad_data)"
      ],
      "execution_count": 44,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "159571"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 44
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "lbUoB_hwz851",
        "outputId": "649a5e09-14e4-4877-d962-0877de9337de",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "# Note that the 0 axis is same as comments, just added a new padding dimension which is equal to MAX_SEQUENCE_LENGTH . \n",
        "# Padded tensor shape : (Num of Samples,MAX_SEQUENCE_LENGTH)\n",
        "\n",
        "print('Shape of Padded Tensor: {}'.format(pad_data.shape)) "
      ],
      "execution_count": 45,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Shape of Padded Tensor: (159571, 100)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ypOHVnq2z855"
      },
      "source": [
        "### Prepare embedding matrix"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "p9DdUierz856"
      },
      "source": [
        "# This truncates the word embeddings to MAX_VOCAB_SIZE, +1 is to take care of a little indexing problem.\n",
        "\n",
        "# In Keras 0 is reserved just for padding, so the indexing starts at 1. \n",
        "\n",
        "# Since, python index starts at 0, that +1 takes care of any indexing miss matching. \n",
        "\n",
        "num_words = min(MAX_VOCAB_SIZE, len(word2idx) + 1) "
      ],
      "execution_count": 46,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Ej0Gtj4Uz85-",
        "outputId": "1670e994-50d5-4d6c-fa5f-109ccbdc5b2a",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "num_words"
      ],
      "execution_count": 47,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "20000"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 47
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "dZFDuh2Dz86B"
      },
      "source": [
        "embedding_matrix = np.zeros((num_words, EMBEDDING_DIM))"
      ],
      "execution_count": 48,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "lKnKInkxz86I",
        "outputId": "1659b626-b77d-4e80-92f3-3b35372d8df8",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 138
        }
      },
      "source": [
        "embedding_matrix"
      ],
      "execution_count": 49,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[0., 0., 0., ..., 0., 0., 0.],\n",
              "       [0., 0., 0., ..., 0., 0., 0.],\n",
              "       [0., 0., 0., ..., 0., 0., 0.],\n",
              "       ...,\n",
              "       [0., 0., 0., ..., 0., 0., 0.],\n",
              "       [0., 0., 0., ..., 0., 0., 0.],\n",
              "       [0., 0., 0., ..., 0., 0., 0.]])"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 49
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "veb7r2AUz86W",
        "outputId": "dbc96bb3-15fa-4970-e685-7b8ceb623dfd",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "embedding_matrix.shape\n",
        "# We have successfuly trucnated and created an embedding matrix of dimension (MAX_VOCAB_SIZE,EMBEDDING_DIM )\n",
        "# Now we have to index it using the words from the pre-trained word2vec to create pre-trained embedding matrix "
      ],
      "execution_count": 50,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(20000, 100)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 50
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "cUkZgpCwz86d"
      },
      "source": [
        "for word,i in word2idx.items():\n",
        "    if i < MAX_VOCAB_SIZE:\n",
        "        embedding_vector = word2vec.get(word)\n",
        "        if embedding_vector is not None:\n",
        "            # words not found in embedding index will be all zeros.\n",
        "            embedding_matrix[i] = embedding_vector    "
      ],
      "execution_count": 51,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "TVdX1W8ez86m",
        "outputId": "d482f0f1-c339-421f-b617-3bb386b07192",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 449
        }
      },
      "source": [
        "embedding_matrix[2]"
      ],
      "execution_count": 52,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([-1.89700007e-01,  5.00239991e-02,  1.90840006e-01, -4.91839983e-02,\n",
              "       -8.97369981e-02,  2.10060000e-01, -5.49520016e-01,  9.83769968e-02,\n",
              "       -2.01350003e-01,  3.42409998e-01, -9.26769972e-02,  1.60999998e-01,\n",
              "       -1.32679999e-01, -2.81599998e-01,  1.87370002e-01, -4.29589987e-01,\n",
              "        9.60389972e-01,  1.39719993e-01, -1.07809997e+00,  4.05180007e-01,\n",
              "        5.05389988e-01, -5.50639987e-01,  4.84400004e-01,  3.80439997e-01,\n",
              "       -2.90549989e-03, -3.49420011e-01, -9.96960029e-02, -7.83680022e-01,\n",
              "        1.03629994e+00, -2.31399998e-01, -4.71210003e-01,  5.71259975e-01,\n",
              "       -2.14540005e-01,  3.59580010e-01, -4.83190000e-01,  1.08749998e+00,\n",
              "        2.85239995e-01,  1.24470003e-01, -3.92480008e-02, -7.67320022e-02,\n",
              "       -7.63429999e-01, -3.24090004e-01, -5.74899971e-01, -1.08930004e+00,\n",
              "       -4.18110013e-01,  4.51200008e-01,  1.21119998e-01, -5.13670027e-01,\n",
              "       -1.33489996e-01, -1.13779998e+00, -2.87680000e-01,  1.67740002e-01,\n",
              "        5.58040023e-01,  1.53869998e+00,  1.88590009e-02, -2.97210002e+00,\n",
              "       -2.42160007e-01, -9.24950004e-01,  2.19919991e+00,  2.82339990e-01,\n",
              "       -3.47799987e-01,  5.16210020e-01, -4.33869988e-01,  3.68519992e-01,\n",
              "        7.45729983e-01,  7.21020028e-02,  2.79309988e-01,  9.25689995e-01,\n",
              "       -5.03359996e-02, -8.58560026e-01, -1.35800004e-01, -9.25509989e-01,\n",
              "       -3.39910001e-01, -1.03939998e+00, -6.72030002e-02, -2.13789999e-01,\n",
              "       -4.76900011e-01,  2.13770002e-01, -8.40080023e-01,  5.25359996e-02,\n",
              "        5.92980027e-01,  2.96039999e-01, -6.76440001e-01,  1.39160007e-01,\n",
              "       -1.55040002e+00, -2.07650006e-01,  7.22199976e-01,  5.20560026e-01,\n",
              "       -7.62209967e-02, -1.51940003e-01, -1.31339997e-01,  5.86169995e-02,\n",
              "       -3.18690002e-01, -6.14189982e-01, -6.23929977e-01, -4.15479988e-01,\n",
              "       -3.81750017e-02, -3.98039997e-01,  4.76469994e-01, -1.59830004e-01])"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 52
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "FSGiSh1-z86q"
      },
      "source": [
        "### Loading pre-trained word embeddings into an Embedding layer"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "7L1VEBsBz86q"
      },
      "source": [
        "embedding_layer = Embedding(input_dim=num_words,output_dim=EMBEDDING_DIM, weights=[embedding_matrix],\n",
        "                            input_length=MAX_SEQUENCE_LENGTH,trainable=False)"
      ],
      "execution_count": 53,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "A9kDmdSvz86w"
      },
      "source": [
        "### Buiding the Model "
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "kLPkMWI4z86x"
      },
      "source": [
        "input_ = Input(shape=(MAX_SEQUENCE_LENGTH,))\n",
        "\n",
        "x = embedding_layer(input_)\n",
        "x = Bidirectional(LSTM(20, return_sequences=True))(x)\n",
        "x = GlobalMaxPooling1D()(x) # Grabs the maximum value from the entire seqence \n",
        "output = Dense(len(labels), activation='sigmoid')(x)"
      ],
      "execution_count": 54,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "N0R4Jr7Dz863"
      },
      "source": [
        "model = Model(input_,output)"
      ],
      "execution_count": 55,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "dC5Ialyvz86-",
        "outputId": "1b2ee464-ee5e-4831-c7bb-6c9d28576381",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 345
        }
      },
      "source": [
        "print(model.summary())"
      ],
      "execution_count": 56,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Model: \"functional_1\"\n",
            "_________________________________________________________________\n",
            "Layer (type)                 Output Shape              Param #   \n",
            "=================================================================\n",
            "input_1 (InputLayer)         [(None, 100)]             0         \n",
            "_________________________________________________________________\n",
            "embedding (Embedding)        (None, 100, 100)          2000000   \n",
            "_________________________________________________________________\n",
            "bidirectional (Bidirectional (None, 100, 40)           19360     \n",
            "_________________________________________________________________\n",
            "global_max_pooling1d (Global (None, 40)                0         \n",
            "_________________________________________________________________\n",
            "dense (Dense)                (None, 6)                 246       \n",
            "=================================================================\n",
            "Total params: 2,019,606\n",
            "Trainable params: 19,606\n",
            "Non-trainable params: 2,000,000\n",
            "_________________________________________________________________\n",
            "None\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "43F3fbYnz87A"
      },
      "source": [
        "model.compile(optimizer='adam',loss='binary_crossentropy',metrics=['accuracy'])"
      ],
      "execution_count": 57,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "il3MCLQ3z87D"
      },
      "source": [
        "### Training "
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "2VVingpoz87E",
        "outputId": "5a2bcbd4-bb46-4957-803e-6484470c8f65",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 190
        }
      },
      "source": [
        "trained_model = model.fit(pad_data,targets,batch_size=BATCH_SIZE,epochs=EPOCHS,validation_split=VALIDATION_SPLIT)"
      ],
      "execution_count": 58,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Epoch 1/5\n",
            "998/998 [==============================] - 96s 97ms/step - loss: 0.0967 - accuracy: 0.9253 - val_loss: 0.0621 - val_accuracy: 0.9930\n",
            "Epoch 2/5\n",
            "998/998 [==============================] - 96s 96ms/step - loss: 0.0575 - accuracy: 0.9939 - val_loss: 0.0569 - val_accuracy: 0.9936\n",
            "Epoch 3/5\n",
            "998/998 [==============================] - 97s 97ms/step - loss: 0.0538 - accuracy: 0.9925 - val_loss: 0.0540 - val_accuracy: 0.9920\n",
            "Epoch 4/5\n",
            "998/998 [==============================] - 100s 100ms/step - loss: 0.0513 - accuracy: 0.9899 - val_loss: 0.0522 - val_accuracy: 0.9912\n",
            "Epoch 5/5\n",
            "998/998 [==============================] - 96s 96ms/step - loss: 0.0492 - accuracy: 0.9906 - val_loss: 0.0506 - val_accuracy: 0.9886\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "YMEqiKDT6RtC"
      },
      "source": [
        "# save\n",
        "model.save(path + 'Transfer Learning Models/Toxic_LSTM.h5')"
      ],
      "execution_count": 67,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "gy8_jfro7Mj_"
      },
      "source": [
        "# load\n",
        "from keras.models import load_model, model_from_json\n",
        "model = load_model(path + 'Transfer Learning Models/Toxic_LSTM.h5')"
      ],
      "execution_count": 69,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "6GnxBlIez87K"
      },
      "source": [
        "### Plotting Accuracy"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "v7HM2HfPz87L",
        "outputId": "4cedd8d8-275f-4f4e-d43a-7870e1b6247e",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 312
        }
      },
      "source": [
        "plt.plot(trained_model.history['accuracy'])\n",
        "plt.plot(trained_model.history['val_accuracy'])\n",
        "plt.title('Model accuracy')\n",
        "plt.ylabel('accuracy')\n",
        "plt.xlabel('epoch')\n",
        "plt.legend(['train', 'Validation'], loc='upper left')"
      ],
      "execution_count": 63,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.legend.Legend at 0x7fd23d6b23c8>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 63
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "RI3aQSPcz87O"
      },
      "source": [
        "#### Not a lot of change here"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ao7jZ9lTz87P"
      },
      "source": [
        "### Plotting Loss"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "DSxmYSknz87Q",
        "outputId": "826e4c98-b372-455d-817c-29131f28cde3",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 312
        }
      },
      "source": [
        "plt.plot(trained_model.history['loss'])\n",
        "plt.plot(trained_model.history['val_loss'])\n",
        "plt.title('model loss')\n",
        "plt.ylabel('loss')\n",
        "plt.xlabel('epoch')\n",
        "plt.legend(['train', 'validation'], loc='upper left')"
      ],
      "execution_count": 64,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.legend.Legend at 0x7fd23d6777f0>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 64
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ecuJ94rfz87T"
      },
      "source": [
        "#### Same here as well "
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "SL2QGVRJz87U"
      },
      "source": [
        "### Plotting mean AUC over each label"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "SshMClGnz87U"
      },
      "source": [
        "pred = model.predict(pad_data)"
      ],
      "execution_count": 65,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "u2H3z4N2z87X",
        "outputId": "82b78648-d797-4150-ff7e-b7221f20df1f",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "auc_accuracy = []\n",
        "for i in range(len(labels)):\n",
        "    auc = roc_auc_score(targets[:,i], pred[:,i])\n",
        "    auc_accuracy.append(auc)\n",
        "print('Mean AUC score for all labels:',np.mean(auc_accuracy))"
      ],
      "execution_count": 66,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Mean AUC score for all labels: 0.9779559475281635\n"
          ],
          "name": "stdout"
        }
      ]
    }
  ]
}